#compdef scoop
#autoload

local expl

_scoop_get_remote_pkgs() {
  if (( ${#_scoop_remote_pkgs} == 0 )); then
    _scoop_remote_pkgs=( $(scoop search | tr -d $'\r' | cut -d ' ' -f 5) )
  fi
  _wanted _scoop_remote_pkgs expl 'packages' compadd -a _scoop_remote_pkgs
}

_scoop_get_local_pkgs() {
  if (( ${#_scoop_local_pkgs} == 0 )); then
    _scoop_local_pkgs=( $(scoop export | tr -d $'\r' | cut -d ' ' -f 1) )
  fi
  _wanted _scoop_local_pkgs expl 'installed packages' compadd -a _scoop_local_pkgs
}

_scoop_get_remote_bucket() {
  if (( ${#_scoop_remote_buckets} == 0 )); then
    _scoop_remote_buckets=( $(scoop bucket known | tr -d $'\r') )
  fi
  _wanted _scoop_remote_buckets expl 'buckets' compadd -a _scoop_remote_buckets
}

_scoop_get_local_bucket() {
  if (( ${#_local_buckets} == 0 )); then
    _scoop_local_buckets=( $(scoop bucket list | tr -d $'\r') )
  fi
  _wanted _scoop_local_buckets expl 'installed buckets' compadd -a _scoop_local_buckets
}

_scoop_get_cache() {
  local -a _local_cache=( $(scoop cache show | tr -d $'\r' | head -n -4 | awk '{print $3}') )
  _wanted _local_cache expl 'cache' compadd -a _local_cache
}

local -a _1st_arguments
_1st_arguments=(
  'alias:Manage scoop aliases'
  'bucket:Manage Scoop buckets'
  'cache:Show or clear the download cache'
  'checkup:Check for potential problems'
  'cleanup:Cleanup apps by removing old versions'
  'config:Get or set configuration values'
  'create:Create a custom app manifest'
  'depends:List dependencies for an app'
  'export:Exports (an importable) list of installed apps'
  'help:Show help for a command'
  'home:Opens the app homepage'
  'info:Display information about an app'
  'install:Install apps'
  'list:List installed apps'
  'prefix:Returns the path to the specified app'
  'reset:Reset an app to resolve conflicts'
  'search:Search available apps'
  'status:Show status and check for new app versions'
  'uninstall:Uninstall an app'
  'update:Update apps, or Scoop itself'
  'virustotal:Look for app'\''s hash on virustotal.com'
  'which:Locate a shim/executable (similar to '\''which'\'' on Linux)'
)

local -a _alias_arguments
_alias_arguments=(
  'add:add <name> <command> [<description>]'
  'list:List all alias'
  'rm:rm <name>'
)

local -a _bucket_arguments
_bucket_arguments=(
  'add:add <name> [<repo>]'
  'list:List all local buckets'
  'known:List all known buckets'
  'rm:rm <name>'
)

local -a _cache_arguments
_cache_arguments=(
  'show:show [<name>]'
  'rm:rm <name>'
)

_arguments \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "scoop subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  install)
    _arguments \
      '(-g --global)'{-g,--global}'[Install the app globally]' \
      '(-i --independent)'{-i,--independent}'[Don'\''t install dependencies automatically]' \
      '(-k --no-cache)'{-k,--no-cache}'[Don'\''t use the download cache]' \
      '(-s --skip)'{-s,--skip}'[Skip hash validation (use with caution!)]' \
      '(-a --arch)'{-a,--arch}'[Use the specified architecture, if the app supports it]:lint options:(32bit 64bit)' \
      '*: :->packages' &&  return 0
      
      if [[ "$state" == packages ]]; then
        _scoop_get_remote_pkgs
      fi
      _path_files -g '*.json' ;;
  uninstall)
    _arguments \
      '(-g --global)'{-g,--global}'[Uninstall a globally installed app]' \
      '(-p --purge)'{-p,--purge}'[Remove all persistent data]' \
      '*: :->packages' &&  return 0

      if [[ "$state" == packages ]]; then
        _scoop_get_local_pkgs
      fi ;;
  cleanup)
    _arguments \
      '(-g --global)'{-g,--global}'[Cleanup a globally installed app]' \
      '*: :->packages' &&  return 0

      if [[ "$state" == packages ]]; then
        _scoop_get_local_pkgs
      fi ;;
  virustotal)
    _arguments \
      '(-a --arch)'{-a,--arch}'[Use the specified architecture, if the app supports it]:lint options:(32bit 64bit)' \
      '(-s --scan)'{-s,--scan}$'[For packages where VirusTotal has no information, send download URL' \
      '(-n --no-depends)'{-i,--independent}'[By default, all dependencies are checked, too. This flag allows]' \
      '*: :->packages' &&  return 

      if [[ "$state" == packages ]]; then
        _scoop_get_local_pkgs
      fi ;;
  update)
    _arguments \
      '(-f --force)'{-g,--force}'[Force update even when there isn'\''t a newer version]' \
      '(-g --global)'{-g,--global}'[Update a globally installed app]' \
      '(-i --independent)'{-i,--independent}'[Don'\''t install dependencies automatically]' \
      '(-k --no-cache)'{-k,--no-cache}'[Don'\''t use the download cache]' \
      '(-s --skip)'{-s,--skip}'[Skip hash validation (use with caution!)]' \
      '(-q --quiet)'{-a,--quiet}'[Hide extraneous messages]' \
      '*: :->packages' &&  return 0
    
      if [[ "$state" == packages ]]; then
        _scoop_get_local_pkgs
      fi ;;
  prefix)
    _scoop_get_local_pkgs ;;
  reset)
    _scoop_get_local_pkgs ;;
  info)
    _scoop_get_remote_pkgs ;;
  home)
    _scoop_get_remote_pkgs ;;
  depends)
    _scoop_get_remote_pkgs ;;
  help)
    _describe -t commands "scoop help subcommand" _1st_arguments ;;
  alias)
    _describe -t commands "scoop alias subcommand" _alias_arguments ;;
  which)
    _command_names -e ;;
  bucket)
    case "$words[2]" in
      add)
        _scoop_get_remote_bucket ;;
      rm)
        _scoop_get_local_bucket ;;
      '')
        _describe -t commands "scoop bucket subcommand" _bucket_arguments ;;
    esac ;;
  cache)
    case "$words[2]" in
      rm)
        _scoop_get_cache ;;
      '')
        _describe -t commands "scoop cache subcommand" _cache_arguments ;;
    esac ;;
esac